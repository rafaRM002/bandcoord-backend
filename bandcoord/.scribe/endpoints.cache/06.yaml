## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Gestión de Eventos por Usuario'
description: |-

  APIs para gestionar la relación entre eventos y usuarios
endpoints:
  -
    httpMethods:
      - GET
    uri: api/evento-usuario
    metadata:
      groupName: 'Gestión de Eventos por Usuario'
      groupDescription: |-

        APIs para gestionar la relación entre eventos y usuarios
      subgroup: ''
      subgroupDescription: ''
      title: 'Listar eventos por usuario'
      description: 'Obtiene un listado de todas las relaciones entre eventos y usuarios.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Listado de eventos por usuario obtenido correctamente.",
            "data": [
              {
                "evento_id": 1,
                "usuario_id": 1,
                "confirmacion": true,
                "created_at": "2025-06-10T12:00:00.000000Z",
                "updated_at": "2025-06-10T12:00:00.000000Z"
              }
            ]
          }
        headers: []
        description: Éxito
        custom: []
      -
        status: 500
        content: |-
          {
            "error": "Error al obtener los eventos de usuarios.",
            "message": "Mensaje de error específico"
          }
        headers: []
        description: Error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/evento-usuario
    metadata:
      groupName: 'Gestión de Eventos por Usuario'
      groupDescription: |-

        APIs para gestionar la relación entre eventos y usuarios
      subgroup: ''
      subgroupDescription: ''
      title: 'Crear evento por usuario'
      description: 'Registra un nuevo evento-usuario en el sistema.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      evento_id:
        name: evento_id
        description: 'ID del evento.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      usuario_id:
        name: usuario_id
        description: 'ID del usuario.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      confirmacion:
        name: confirmacion
        description: 'optional Estado de confirmación del usuario.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      evento_id: 1
      usuario_id: 1
      confirmacion: true
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "message": "Evento de usuario creado correctamente.",
            "data": {
              "evento_id": 1,
              "usuario_id": 1,
              "confirmacion": true,
              "created_at": "2025-06-10T12:00:00.000000Z",
              "updated_at": "2025-06-10T12:00:00.000000Z"
            }
          }
        headers: []
        description: Creado
        custom: []
      -
        status: 400
        content: |-
          {
            "error": "El usuario ya está registrado para este evento."
          }
        headers: []
        description: 'Usuario ya registrado'
        custom: []
      -
        status: 422
        content: |-
          {
            "error": {
              "evento_id": ["El evento_id es requerido."],
              "usuario_id": ["El usuario_id es requerido."]
            }
          }
        headers: []
        description: 'Error de validación'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/evento-usuario/{evento_id}/{usuario_id}'
    metadata:
      groupName: 'Gestión de Eventos por Usuario'
      groupDescription: |-

        APIs para gestionar la relación entre eventos y usuarios
      subgroup: ''
      subgroupDescription: ''
      title: 'Mostrar evento por usuario específico'
      description: 'Obtiene los detalles de un registro específico de evento-usuario incluyendo la información relacionada.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      evento_id:
        name: evento_id
        description: 'El ID del evento.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      usuario_id:
        name: usuario_id
        description: 'El ID del usuario.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      evento_id: '1'
      usuario_id: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Evento usuario obtenido correctamente.",
            "data": {
              "evento_id": 1,
              "usuario_id": 1,
              "confirmacion": true,
              "created_at": "2025-06-10T12:00:00.000000Z",
              "updated_at": "2025-06-10T12:00:00.000000Z",
              "evento": {
                "id": 1,
                "nombre": "Ensayo General",
                "descripcion": "Ensayo general de la banda"
              },
              "usuario": {
                "id": 1,
                "nombre": "Juan Pérez",
                "email": "juan@ejemplo.com"
              }
            }
          }
        headers: []
        description: Éxito
        custom: []
      -
        status: 404
        content: |-
          {
            "error": "Evento usuario no encontrado."
          }
        headers: []
        description: 'No encontrado'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/evento-usuario/{evento_id}/{usuario_id}'
    metadata:
      groupName: 'Gestión de Eventos por Usuario'
      groupDescription: |-

        APIs para gestionar la relación entre eventos y usuarios
      subgroup: ''
      subgroupDescription: ''
      title: 'Actualizar confirmación'
      description: 'Actualiza el estado de confirmación de un usuario para un evento específico.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      evento_id:
        name: evento_id
        description: 'ID del evento.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      usuario_id:
        name: usuario_id
        description: 'ID del usuario.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      evento_id: '1'
      usuario_id: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      confirmacion:
        name: confirmacion
        description: 'Nuevo estado de confirmación.'
        required: true
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      confirmacion: true
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Confirmación actualizada correctamente."
          }
        headers: []
        description: Éxito
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No se encontró el registro para actualizar."
          }
        headers: []
        description: 'No encontrado'
        custom: []
      -
        status: 422
        content: |-
          {
            "error": {
              "confirmacion": ["El campo confirmacion es requerido."]
            }
          }
        headers: []
        description: 'Error de validación'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/evento-usuario/{evento_id}/{usuario_id}'
    metadata:
      groupName: 'Gestión de Eventos por Usuario'
      groupDescription: |-

        APIs para gestionar la relación entre eventos y usuarios
      subgroup: ''
      subgroupDescription: ''
      title: 'Eliminar evento por usuario'
      description: 'Elimina un registro de evento-usuario específico.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      evento_id:
        name: evento_id
        description: 'ID del evento.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      usuario_id:
        name: usuario_id
        description: 'ID del usuario.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      evento_id: '1'
      usuario_id: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Registro eliminado correctamente."
          }
        headers: []
        description: Éxito
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No se encontró el registro para eliminar."
          }
        headers: []
        description: 'No encontrado'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
