name: 'Gestión de Composiciones de Usuario'
description: |-

  APIs para gestionar las relaciones entre composiciones y usuarios
endpoints:
  -
    httpMethods:
      - GET
    uri: api/composicion-usuario
    metadata:
      groupName: 'Gestión de Composiciones de Usuario'
      groupDescription: |-

        APIs para gestionar las relaciones entre composiciones y usuarios
      subgroup: ''
      subgroupDescription: ''
      title: 'Listar todas las composiciones-usuario'
      description: 'Obtiene un listado de todas las relaciones entre composiciones y usuarios.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [
             {
               "composicion_id": 1,
               "usuario_id": 1,
               "created_at": "2025-06-10T12:00:00.000000Z",
               "updated_at": "2025-06-10T12:00:00.000000Z"
             }
           ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
           "error": "Hubo un problema al obtener las composiciones de usuario.",
           "message": "Error message"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/composicion-usuario
    metadata:
      groupName: 'Gestión de Composiciones de Usuario'
      groupDescription: |-

        APIs para gestionar las relaciones entre composiciones y usuarios
      subgroup: ''
      subgroupDescription: ''
      title: 'Crear una nueva composición-usuario'
      description: 'Crea una nueva relación entre una composición y un usuario.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      composicion_id:
        name: composicion_id
        description: 'ID de la composición.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      usuario_id:
        name: usuario_id
        description: 'ID del usuario.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      composicion_id: 1
      usuario_id: 1
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
           "message": "Composición de usuario creada exitosamente.",
           "data": {
             "composicion_id": 1,
             "usuario_id": 1,
             "created_at": "2025-06-10T12:00:00.000000Z",
             "updated_at": "2025-06-10T12:00:00.000000Z"
           }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 409
        content: |-
          {
           "message": "Esta composición de usuario ya existe."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
           "error": "Hubo un problema al crear la composición de usuario.",
           "message": "Error message"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/composicion-usuario/{composicion_id}/{usuario_id}'
    metadata:
      groupName: 'Gestión de Composiciones de Usuario'
      groupDescription: |-

        APIs para gestionar las relaciones entre composiciones y usuarios
      subgroup: ''
      subgroupDescription: ''
      title: 'Obtener una composición-usuario específica'
      description: 'Recupera la información de una relación específica entre composición y usuario.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      composicion_id:
        name: composicion_id
        description: 'ID de la composición.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      usuario_id:
        name: usuario_id
        description: 'ID del usuario.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      composicion_id: 1
      usuario_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "composicion_id": 1,
           "usuario_id": 1,
           "created_at": "2025-06-10T12:00:00.000000Z",
           "updated_at": "2025-06-10T12:00:00.000000Z"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
           "error": "Composición de usuario no encontrada.",
           "message": "No se encontró una relación entre composición y usuario con esos IDs."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
           "error": "Hubo un problema al obtener la composición de usuario.",
           "message": "Error message"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/composicion-usuario/{composicion_id}/{usuario_id}'
    metadata:
      groupName: 'Gestión de Composiciones de Usuario'
      groupDescription: |-

        APIs para gestionar las relaciones entre composiciones y usuarios
      subgroup: ''
      subgroupDescription: ''
      title: 'Eliminar una composición-usuario'
      description: 'Elimina una relación existente entre una composición y un usuario.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      composicion_id:
        name: composicion_id
        description: 'ID de la composición.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      usuario_id:
        name: usuario_id
        description: 'ID del usuario.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      composicion_id: 1
      usuario_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "message": "Registro eliminado correctamente."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
           "message": "No se encontró el registro para eliminar."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
           "error": "Hubo un problema al eliminar la composición de usuario.",
           "message": "Error message"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
